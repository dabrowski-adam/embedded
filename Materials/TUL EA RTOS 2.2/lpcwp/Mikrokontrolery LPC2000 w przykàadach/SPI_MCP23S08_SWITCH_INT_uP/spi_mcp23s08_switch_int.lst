   1              		.file	"SPI_MCP23S08_SWITCH_INT.c"
   9              	.Ltext0:
  10              		.global	MCP23S08_settings
  11              		.section	.rodata
  14              	MCP23S08_settings:
  15 0000 0F       		.byte	15
  16 0001 00       		.byte	0
  17 0002 0F       		.byte	15
  18 0003 00       		.byte	0
  19 0004 00       		.byte	0
  20 0005 04       		.byte	4
  21 0006 FF       		.byte	-1
  22              		.text
  23              		.align	2
  24              		.global	EINT0Init
  26              	EINT0Init:
  27              	.LFB2:
  28              		.file 1 "SPI_MCP23S08_SWITCH_INT.c"
   1:SPI_MCP23S08_SWITCH_INT.c **** ////////////////////////////////////////////////////////
   2:SPI_MCP23S08_SWITCH_INT.c **** // Function:	SPI example - dipswitch reading via MCP23S08
   3:SPI_MCP23S08_SWITCH_INT.c **** //				using EINT0 interrupt.
   4:SPI_MCP23S08_SWITCH_INT.c **** // Target:		LPC2138
   5:SPI_MCP23S08_SWITCH_INT.c **** // Board:		ZL6ARM
   6:SPI_MCP23S08_SWITCH_INT.c **** // Quartz:		12MHz
   7:SPI_MCP23S08_SWITCH_INT.c **** // Compiler:	ARM-GCC
   8:SPI_MCP23S08_SWITCH_INT.c **** // Author:		Arkadiusz Antoniak @ 2006, Poland
   9:SPI_MCP23S08_SWITCH_INT.c **** // Copyright:	(c) Arkadiusz Antoniak, 2006
  10:SPI_MCP23S08_SWITCH_INT.c **** ////////////////////////////////////////////////////////
  11:SPI_MCP23S08_SWITCH_INT.c **** #include <LPC213x.H>	    
  12:SPI_MCP23S08_SWITCH_INT.c **** #include "lcd.h"
  13:SPI_MCP23S08_SWITCH_INT.c **** 
  14:SPI_MCP23S08_SWITCH_INT.c **** //Constants
  15:SPI_MCP23S08_SWITCH_INT.c **** #define SLAVE_ADDRESS_MCP23S08_W 0x46
  16:SPI_MCP23S08_SWITCH_INT.c **** #define SLAVE_ADDRESS_MCP23S08_R 0x47
  17:SPI_MCP23S08_SWITCH_INT.c **** #define CS_SET IOSET0=(1<<27)
  18:SPI_MCP23S08_SWITCH_INT.c **** #define CS_CLR IOCLR0=(1<<27)
  19:SPI_MCP23S08_SWITCH_INT.c **** #define ADDR_MCP23S08_GPIO 0x09
  20:SPI_MCP23S08_SWITCH_INT.c **** 
  21:SPI_MCP23S08_SWITCH_INT.c **** //Globals
  22:SPI_MCP23S08_SWITCH_INT.c **** const unsigned char MCP23S08_settings[]={
  23:SPI_MCP23S08_SWITCH_INT.c **** 	0x0F,	//IODIR (0x00)
  24:SPI_MCP23S08_SWITCH_INT.c **** 	0x00,	//IPOL (0x01)
  25:SPI_MCP23S08_SWITCH_INT.c **** 	0x0F,	//GPINTEN
  26:SPI_MCP23S08_SWITCH_INT.c **** 	0x00,	//DEFVAL
  27:SPI_MCP23S08_SWITCH_INT.c **** 	0x00,	//INTCON
  28:SPI_MCP23S08_SWITCH_INT.c **** 	0x04,	//IOCON
  29:SPI_MCP23S08_SWITCH_INT.c **** 	0xFF	//GPPU
  30:SPI_MCP23S08_SWITCH_INT.c **** };
  31:SPI_MCP23S08_SWITCH_INT.c **** 
  32:SPI_MCP23S08_SWITCH_INT.c **** 
  33:SPI_MCP23S08_SWITCH_INT.c **** //EINT0 interrupt handler's header
  34:SPI_MCP23S08_SWITCH_INT.c **** void EINT0ISR(void) __attribute__ ((interrupt));
  35:SPI_MCP23S08_SWITCH_INT.c **** 
  36:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
  37:SPI_MCP23S08_SWITCH_INT.c **** // EINT0 Init
  38:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
  39:SPI_MCP23S08_SWITCH_INT.c **** void EINT0Init(void)
  40:SPI_MCP23S08_SWITCH_INT.c **** {
  29              		.loc 1 40 0
  30              		@ Function supports interworking.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		@ lr needed for prologue
  41:SPI_MCP23S08_SWITCH_INT.c **** 	//P0.1=EINT0
  42:SPI_MCP23S08_SWITCH_INT.c **** 	PINSEL0|=(3<<2);
  36              		.loc 1 42 0
  37 0000 0E22A0E3 		mov	r2, #-536870912
  38 0004 0B1982E2 		add	r1, r2, #180224
  39 0008 003091E5 		ldr	r3, [r1, #0]
  40 000c 0C3083E3 		orr	r3, r3, #12
  41 0010 003081E5 		str	r3, [r1, #0]
  43:SPI_MCP23S08_SWITCH_INT.c **** 	
  44:SPI_MCP23S08_SWITCH_INT.c **** 	//EXT0 edge trigered
  45:SPI_MCP23S08_SWITCH_INT.c **** 	EXTMODE=1;
  42              		.loc 1 45 0
  43 0014 7F2982E2 		add	r2, r2, #2080768
  44 0018 0130A0E3 		mov	r3, #1
  45 001c 4831C2E5 		strb	r3, [r2, #328]
  46:SPI_MCP23S08_SWITCH_INT.c **** 	
  47:SPI_MCP23S08_SWITCH_INT.c **** 	//Falling edge
  48:SPI_MCP23S08_SWITCH_INT.c **** 	EXTPOLAR=0;
  46              		.loc 1 48 0
  47 0020 013043E2 		sub	r3, r3, #1
  48 0024 4C31C2E5 		strb	r3, [r2, #332]
  49:SPI_MCP23S08_SWITCH_INT.c **** 
  50:SPI_MCP23S08_SWITCH_INT.c **** 	//VIC Slot 1 used for handling EINT0 IRQ
  51:SPI_MCP23S08_SWITCH_INT.c **** 	VICVectCntl1 = 0x0000002E;
  49              		.loc 1 51 0
  50 0028 2E20A0E3 		mov	r2, #46
  51 002c DF3EE0E3 		mvn	r3, #3568
  52 0030 0B2003E5 		str	r2, [r3, #-11]
  52:SPI_MCP23S08_SWITCH_INT.c **** 	VICVectAddr1 = (unsigned int)EINT0ISR;
  53              		.loc 1 52 0
  54 0034 18209FE5 		ldr	r2, .L3
  55 0038 013C43E2 		sub	r3, r3, #256
  56 003c 0B2003E5 		str	r2, [r3, #-11]
  53:SPI_MCP23S08_SWITCH_INT.c **** 	VICIntEnable |= 0x00004000;
  57              		.loc 1 53 0
  58 0040 FE2EE0E3 		mvn	r2, #4064
  59 0044 0F3012E5 		ldr	r3, [r2, #-15]
  60 0048 013983E3 		orr	r3, r3, #16384
  61 004c 0F3002E5 		str	r3, [r2, #-15]
  54:SPI_MCP23S08_SWITCH_INT.c **** }
  62              		.loc 1 54 0
  63 0050 1EFF2FE1 		bx	lr
  64              	.L4:
  65              		.align	2
  66              	.L3:
  67 0054 00000000 		.word	EINT0ISR
  68              	.LFE2:
  70              		.align	2
  71              		.global	SPIInit
  73              	SPIInit:
  74              	.LFB3:
  55:SPI_MCP23S08_SWITCH_INT.c **** 
  56:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
  57:SPI_MCP23S08_SWITCH_INT.c **** // SPI Init
  58:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
  59:SPI_MCP23S08_SWITCH_INT.c **** void SPIInit(void)
  60:SPI_MCP23S08_SWITCH_INT.c **** {
  75              		.loc 1 60 0
  76              		@ Function supports interworking.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.LVL1:
  81              		@ lr needed for prologue
  61:SPI_MCP23S08_SWITCH_INT.c **** 	//P0.4=SCK0, P0.5=MISO0, P0.6=MOSI0
  62:SPI_MCP23S08_SWITCH_INT.c **** 	PINSEL0&=~(0x3F<<8);
  82              		.loc 1 62 0
  83 0058 0E12A0E3 		mov	r1, #-536870912
  84 005c 0B2981E2 		add	r2, r1, #180224
  85 0060 003092E5 		ldr	r3, [r2, #0]
  86 0064 3F3CC3E3 		bic	r3, r3, #16128
  87 0068 003082E5 		str	r3, [r2, #0]
  63:SPI_MCP23S08_SWITCH_INT.c **** 	PINSEL0|=(0x15<<8);
  88              		.loc 1 63 0
  89 006c 003092E5 		ldr	r3, [r2, #0]
  90 0070 153C83E3 		orr	r3, r3, #5376
  91 0074 003082E5 		str	r3, [r2, #0]
  64:SPI_MCP23S08_SWITCH_INT.c **** 
  65:SPI_MCP23S08_SWITCH_INT.c **** 	//Initially CS set
  66:SPI_MCP23S08_SWITCH_INT.c **** 	CS_SET;
  92              		.loc 1 66 0
  93 0078 0223A0E3 		mov	r2, #134217728
  94 007c 4E32A0E3 		mov	r3, #-536870908
  95 0080 0A3983E2 		add	r3, r3, #163840
  96 0084 002083E5 		str	r2, [r3, #0]
  67:SPI_MCP23S08_SWITCH_INT.c **** 
  68:SPI_MCP23S08_SWITCH_INT.c **** 	//Set bit rate 15MHz/S0SPCCR = cca. 1.8M
  69:SPI_MCP23S08_SWITCH_INT.c **** 	S0SPCCR = 0x8;
  97              		.loc 1 69 0
  98 0088 0820A0E3 		mov	r2, #8
  99 008c CE32A0E3 		mov	r3, #-536870900
 100 0090 023883E2 		add	r3, r3, #131072
 101 0094 0020C3E5 		strb	r2, [r3, #0]
  70:SPI_MCP23S08_SWITCH_INT.c **** 
  71:SPI_MCP23S08_SWITCH_INT.c **** 	//Control register: Master mode
  72:SPI_MCP23S08_SWITCH_INT.c **** 	S0SPCR=(1<<5);
 102              		.loc 1 72 0
 103 0098 021881E2 		add	r1, r1, #131072
 104 009c 2030A0E3 		mov	r3, #32	@ movhi
 105 00a0 B030C1E1 		strh	r3, [r1, #0]	@ movhi
  73:SPI_MCP23S08_SWITCH_INT.c **** }
 106              		.loc 1 73 0
 107 00a4 1EFF2FE1 		bx	lr
 108              	.LFE3:
 110              		.align	2
 111              		.global	WriteSPIByte
 113              	WriteSPIByte:
 114              	.LFB4:
  74:SPI_MCP23S08_SWITCH_INT.c **** 
  75:SPI_MCP23S08_SWITCH_INT.c **** //*************************************
  76:SPI_MCP23S08_SWITCH_INT.c **** // Write SPI byte
  77:SPI_MCP23S08_SWITCH_INT.c **** //*************************************
  78:SPI_MCP23S08_SWITCH_INT.c **** unsigned char WriteSPIByte(unsigned char byte)
  79:SPI_MCP23S08_SWITCH_INT.c **** {
 115              		.loc 1 79 0
 116              		@ Function supports interworking.
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL2:
 121              		@ lr needed for prologue
 122 00a8 FF0000E2 		and	r0, r0, #255
  80:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned char spi_status,dummy;
  81:SPI_MCP23S08_SWITCH_INT.c **** 
  82:SPI_MCP23S08_SWITCH_INT.c **** 	//Write byte to SPI Data Register
  83:SPI_MCP23S08_SWITCH_INT.c **** 	S0SPDR = byte;
 123              		.loc 1 83 0
 124 00ac 8E32A0E3 		mov	r3, #-536870904
 125 00b0 023883E2 		add	r3, r3, #131072
 126 00b4 B000C3E1 		strh	r0, [r3, #0]	@ movhi
 127 00b8 4E32A0E3 		mov	r3, #-536870908
 128 00bc 022883E2 		add	r2, r3, #131072
 129              	.L8:
  84:SPI_MCP23S08_SWITCH_INT.c **** 
  85:SPI_MCP23S08_SWITCH_INT.c **** 	//Wait for end of byte transmission
  86:SPI_MCP23S08_SWITCH_INT.c **** 	while((S0SPSR & (1<<7))==0);
 130              		.loc 1 86 0
 131 00c0 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 132 00c4 800013E3 		tst	r3, #128
 133 00c8 2E00000A 		beq	.L8
  87:SPI_MCP23S08_SWITCH_INT.c **** 
  88:SPI_MCP23S08_SWITCH_INT.c **** 	//read SPI status register
  89:SPI_MCP23S08_SWITCH_INT.c **** 	spi_status=S0SPSR;
 134              		.loc 1 89 0
 135 00cc 0000D2E5 		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 136              	.LVL3:
  90:SPI_MCP23S08_SWITCH_INT.c **** 
  91:SPI_MCP23S08_SWITCH_INT.c **** 	//dummy read of SPI data register to clear SPIF (S0SPSR.7) bit
  92:SPI_MCP23S08_SWITCH_INT.c **** 	dummy=S0SPDR;	
 137              		.loc 1 92 0
 138 00d0 8E32A0E3 		mov	r3, #-536870904
 139 00d4 023883E2 		add	r3, r3, #131072
 140 00d8 B030D3E1 		ldrh	r3, [r3, #0]
  93:SPI_MCP23S08_SWITCH_INT.c **** 
  94:SPI_MCP23S08_SWITCH_INT.c **** 	return (spi_status & 0x78);
  95:SPI_MCP23S08_SWITCH_INT.c **** }
 141              		.loc 1 95 0
 142 00dc 780000E2 		and	r0, r0, #120
 143 00e0 1EFF2FE1 		bx	lr
 144              	.LFE4:
 146              		.align	2
 147              		.global	SPIMCP23S08SendMultipleBytes
 149              	SPIMCP23S08SendMultipleBytes:
 150              	.LFB5:
  96:SPI_MCP23S08_SWITCH_INT.c **** 
  97:SPI_MCP23S08_SWITCH_INT.c **** //*************************************
  98:SPI_MCP23S08_SWITCH_INT.c **** // SPI Send multiple bytes to MCP23S08
  99:SPI_MCP23S08_SWITCH_INT.c **** //*************************************
 100:SPI_MCP23S08_SWITCH_INT.c **** unsigned char SPIMCP23S08SendMultipleBytes(const unsigned int SlaveAddress, const unsigned char Add
 101:SPI_MCP23S08_SWITCH_INT.c **** {
 151              		.loc 1 101 0
 152              		@ Function supports interworking.
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              	.LVL4:
 156 00e4 0DC0A0E1 		mov	ip, sp
 157              	.LCFI0:
 158 00e8 F0D82DE9 		stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
 159              	.LCFI1:
 160 00ec 04B04CE2 		sub	fp, ip, #4
 161              	.LCFI2:
 162 00f0 0270A0E1 		mov	r7, r2
 163 00f4 0360A0E1 		mov	r6, r3
 164 00f8 FF5001E2 		and	r5, r1, #255
 102:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned int count;
 103:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned char err;
 104:SPI_MCP23S08_SWITCH_INT.c **** 
 105:SPI_MCP23S08_SWITCH_INT.c **** 	//Start
 106:SPI_MCP23S08_SWITCH_INT.c **** 	CS_CLR;
 165              		.loc 1 106 0
 166 00fc 0243A0E3 		mov	r4, #134217728
 167 0100 CE32A0E3 		mov	r3, #-536870900
 168              	.LVL5:
 169 0104 0A3983E2 		add	r3, r3, #163840
 170 0108 004083E5 		str	r4, [r3, #0]
 107:SPI_MCP23S08_SWITCH_INT.c **** 
 108:SPI_MCP23S08_SWITCH_INT.c **** 	//Write SlaveAddress to SPI
 109:SPI_MCP23S08_SWITCH_INT.c **** 	if((err=WriteSPIByte(SlaveAddress & 0xFF))!=0)
 171              		.loc 1 109 0
 172 010c FF0000E2 		and	r0, r0, #255
 173              	.LVL6:
 174 0110 FEFFFFEB 		bl	WriteSPIByte
 175              	.LVL7:
 176 0114 000050E3 		cmp	r0, #0
 110:SPI_MCP23S08_SWITCH_INT.c **** 	{
 111:SPI_MCP23S08_SWITCH_INT.c **** 		CS_SET;
 177              		.loc 1 111 0
 178 0118 4E32A013 		movne	r3, #-536870908
 179 011c 0A398312 		addne	r3, r3, #163840
 180 0120 00408315 		strne	r4, [r3, #0]
 181              		.loc 1 109 0
 182 0124 6600001A 		bne	.L16
 112:SPI_MCP23S08_SWITCH_INT.c **** 		return err;
 113:SPI_MCP23S08_SWITCH_INT.c **** 	}
 114:SPI_MCP23S08_SWITCH_INT.c **** 
 115:SPI_MCP23S08_SWITCH_INT.c **** 	//Write Address to SPI
 116:SPI_MCP23S08_SWITCH_INT.c **** 	if((err=WriteSPIByte(Address))!=0)
 183              		.loc 1 116 0
 184 0128 0500A0E1 		mov	r0, r5
 185 012c FEFFFFEB 		bl	WriteSPIByte
 186 0130 000050E3 		cmp	r0, #0
 117:SPI_MCP23S08_SWITCH_INT.c **** 	{
 118:SPI_MCP23S08_SWITCH_INT.c **** 		CS_SET;
 187              		.loc 1 118 0
 188 0134 0223A013 		movne	r2, #134217728
 189 0138 4E32A013 		movne	r3, #-536870908
 190 013c 0A398312 		addne	r3, r3, #163840
 191 0140 00208315 		strne	r2, [r3, #0]
 192              		.loc 1 116 0
 193 0144 6600001A 		bne	.L16
 194 0148 5F0000EA 		b	.L17
 195              	.L19:
 119:SPI_MCP23S08_SWITCH_INT.c **** 		return err;
 196              		.loc 1 119 0
 197 014c 0040A0E3 		mov	r4, #0
 198              	.LVL8:
 199              	.L20:
 120:SPI_MCP23S08_SWITCH_INT.c **** 	}
 121:SPI_MCP23S08_SWITCH_INT.c **** 
 122:SPI_MCP23S08_SWITCH_INT.c **** 
 123:SPI_MCP23S08_SWITCH_INT.c **** 	//Transmit all bytes
 124:SPI_MCP23S08_SWITCH_INT.c **** 	for(count=0;count<NumberOfBytes;count++)
 125:SPI_MCP23S08_SWITCH_INT.c **** 	{
 126:SPI_MCP23S08_SWITCH_INT.c **** 		//Write byte
 127:SPI_MCP23S08_SWITCH_INT.c **** 		if((err=WriteSPIByte(pData[count]))!=0)
 200              		.loc 1 127 0
 201 0150 0400D7E7 		ldrb	r0, [r7, r4]	@ zero_extendqisi2
 202 0154 FEFFFFEB 		bl	WriteSPIByte
 203 0158 000050E3 		cmp	r0, #0
 204 015c 6200001A 		bne	.L25
 205              		.loc 1 124 0
 206 0160 014084E2 		add	r4, r4, #1
 207 0164 040056E1 		cmp	r6, r4
 208 0168 5200001A 		bne	.L20
 209              	.L23:
 128:SPI_MCP23S08_SWITCH_INT.c **** 		{
 129:SPI_MCP23S08_SWITCH_INT.c **** 			CS_SET;
 130:SPI_MCP23S08_SWITCH_INT.c **** 			return err;
 131:SPI_MCP23S08_SWITCH_INT.c **** 		}
 132:SPI_MCP23S08_SWITCH_INT.c **** 	}
 133:SPI_MCP23S08_SWITCH_INT.c **** 
 134:SPI_MCP23S08_SWITCH_INT.c **** 	//End
 135:SPI_MCP23S08_SWITCH_INT.c **** 	CS_SET;
 210              		.loc 1 135 0
 211 016c 0223A0E3 		mov	r2, #134217728
 212 0170 4E32A0E3 		mov	r3, #-536870908
 213 0174 0A3983E2 		add	r3, r3, #163840
 214 0178 002083E5 		str	r2, [r3, #0]
 215 017c 0000A0E3 		mov	r0, #0
 216 0180 660000EA 		b	.L16
 217              	.LVL9:
 218              	.L17:
 219              		.loc 1 124 0
 220 0184 000056E3 		cmp	r6, #0
 221 0188 5900000A 		beq	.L23
 222 018c 510000EA 		b	.L19
 223              	.LVL10:
 224              	.L25:
 225              		.loc 1 129 0
 226 0190 0223A0E3 		mov	r2, #134217728
 227 0194 4E32A0E3 		mov	r3, #-536870908
 228 0198 0A3983E2 		add	r3, r3, #163840
 229 019c 002083E5 		str	r2, [r3, #0]
 230              	.L16:
 136:SPI_MCP23S08_SWITCH_INT.c **** 
 137:SPI_MCP23S08_SWITCH_INT.c **** 	return 0;
 138:SPI_MCP23S08_SWITCH_INT.c **** }
 231              		.loc 1 138 0
 232 01a0 1CD04BE2 		sub	sp, fp, #28
 233 01a4 F0689DE8 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, lr}
 234 01a8 1EFF2FE1 		bx	lr
 235              	.LFE5:
 237              		.align	2
 238              		.global	SPIMCP23S08SendByte
 240              	SPIMCP23S08SendByte:
 241              	.LFB6:
 139:SPI_MCP23S08_SWITCH_INT.c **** 
 140:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 141:SPI_MCP23S08_SWITCH_INT.c **** // SPI Send Byte to MCP23S08
 142:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 143:SPI_MCP23S08_SWITCH_INT.c **** unsigned char SPIMCP23S08SendByte(const unsigned int SlaveAddress, const unsigned char Address, uns
 144:SPI_MCP23S08_SWITCH_INT.c **** {
 242              		.loc 1 144 0
 243              		@ Function supports interworking.
 244              		@ args = 0, pretend = 0, frame = 4
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246              	.LVL11:
 247 01ac 0DC0A0E1 		mov	ip, sp
 248              	.LCFI3:
 249 01b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 250              	.LCFI4:
 251 01b4 04B04CE2 		sub	fp, ip, #4
 252              	.LCFI5:
 253 01b8 04D04DE2 		sub	sp, sp, #4
 254              	.LCFI6:
 255 01bc FF1001E2 		and	r1, r1, #255
 256 01c0 10204BE5 		strb	r2, [fp, #-16]
 145:SPI_MCP23S08_SWITCH_INT.c **** 	return SPIMCP23S08SendMultipleBytes(SlaveAddress, Address, &DataByte, 1);
 257              		.loc 1 145 0
 258 01c4 10204BE2 		sub	r2, fp, #16
 259              	.LVL12:
 260 01c8 0130A0E3 		mov	r3, #1
 261 01cc FEFFFFEB 		bl	SPIMCP23S08SendMultipleBytes
 262              	.LVL13:
 146:SPI_MCP23S08_SWITCH_INT.c **** }	  
 263              		.loc 1 146 0
 264 01d0 0CD04BE2 		sub	sp, fp, #12
 265 01d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 266 01d8 1EFF2FE1 		bx	lr
 267              	.LFE6:
 269              		.align	2
 270              		.global	MCP23S08_Init
 272              	MCP23S08_Init:
 273              	.LFB7:
 147:SPI_MCP23S08_SWITCH_INT.c **** 
 148:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 149:SPI_MCP23S08_SWITCH_INT.c **** // MCP23S08 Initialization
 150:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 151:SPI_MCP23S08_SWITCH_INT.c **** unsigned char MCP23S08_Init(void)
 152:SPI_MCP23S08_SWITCH_INT.c **** {
 274              		.loc 1 152 0
 275              		@ Function supports interworking.
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 01dc 0DC0A0E1 		mov	ip, sp
 279              	.LCFI7:
 280 01e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 281              	.LCFI8:
 282 01e4 04B04CE2 		sub	fp, ip, #4
 283              	.LCFI9:
 153:SPI_MCP23S08_SWITCH_INT.c **** 	return SPIMCP23S08SendMultipleBytes(SLAVE_ADDRESS_MCP23S08_W, 0, MCP23S08_settings, sizeof(MCP23S0
 284              		.loc 1 153 0
 285 01e8 4600A0E3 		mov	r0, #70
 286 01ec 0010A0E3 		mov	r1, #0
 287 01f0 10209FE5 		ldr	r2, .L31
 288 01f4 0730A0E3 		mov	r3, #7
 289 01f8 FEFFFFEB 		bl	SPIMCP23S08SendMultipleBytes
 154:SPI_MCP23S08_SWITCH_INT.c **** }
 290              		.loc 1 154 0
 291 01fc 0CD04BE2 		sub	sp, fp, #12
 292 0200 00689DE8 		ldmfd	sp, {fp, sp, lr}
 293 0204 1EFF2FE1 		bx	lr
 294              	.L32:
 295              		.align	2
 296              	.L31:
 297 0208 00000000 		.word	MCP23S08_settings
 298              	.LFE7:
 300              		.align	2
 301              		.global	delay
 303              	delay:
 304              	.LFB8:
 155:SPI_MCP23S08_SWITCH_INT.c **** 
 156:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 157:SPI_MCP23S08_SWITCH_INT.c **** // Delay function
 158:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 159:SPI_MCP23S08_SWITCH_INT.c **** void delay(unsigned int del_time) 
 160:SPI_MCP23S08_SWITCH_INT.c **** { 
 305              		.loc 1 160 0
 306              		@ Function supports interworking.
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310              	.LVL14:
 311              		@ lr needed for prologue
 161:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned int i;
 162:SPI_MCP23S08_SWITCH_INT.c **** 	for(i=0;i<del_time;i++);	   
 312              		.loc 1 162 0
 313 020c 000050E3 		cmp	r0, #0
 314 0210 1EFF2F01 		bxeq	lr
 315 0214 0030A0E3 		mov	r3, #0
 316              	.LVL15:
 317              	.L36:
 318 0218 013083E2 		add	r3, r3, #1
 319 021c 030050E1 		cmp	r0, r3
 320 0220 8400001A 		bne	.L36
 321 0224 1EFF2FE1 		bx	lr
 322              	.LFE8:
 324              		.align	2
 325              		.global	SPIMCP23S08ReceiveByte
 327              	SPIMCP23S08ReceiveByte:
 328              	.LFB9:
 163:SPI_MCP23S08_SWITCH_INT.c **** }
 164:SPI_MCP23S08_SWITCH_INT.c **** 
 165:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 166:SPI_MCP23S08_SWITCH_INT.c **** // SPI Receive Byte from MCP23S08
 167:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 168:SPI_MCP23S08_SWITCH_INT.c **** unsigned char SPIMCP23S08ReceiveByte(const unsigned int SlaveAddress, const unsigned char Address, 
 169:SPI_MCP23S08_SWITCH_INT.c **** {
 329              		.loc 1 169 0
 330              		@ Function supports interworking.
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333              	.LVL16:
 334 0228 0DC0A0E1 		mov	ip, sp
 335              	.LCFI10:
 336 022c 30D82DE9 		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 337              	.LCFI11:
 338 0230 04B04CE2 		sub	fp, ip, #4
 339              	.LCFI12:
 340 0234 0250A0E1 		mov	r5, r2
 341 0238 FF4001E2 		and	r4, r1, #255
 170:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned char err;
 171:SPI_MCP23S08_SWITCH_INT.c **** 
 172:SPI_MCP23S08_SWITCH_INT.c **** 	//Start
 173:SPI_MCP23S08_SWITCH_INT.c **** 	CS_CLR;
 342              		.loc 1 173 0
 343 023c 0223A0E3 		mov	r2, #134217728
 344              	.LVL17:
 345 0240 CE32A0E3 		mov	r3, #-536870900
 346 0244 0A3983E2 		add	r3, r3, #163840
 347 0248 002083E5 		str	r2, [r3, #0]
 174:SPI_MCP23S08_SWITCH_INT.c **** 
 175:SPI_MCP23S08_SWITCH_INT.c **** 	//Write SlaveAddress to SPI
 176:SPI_MCP23S08_SWITCH_INT.c **** 	if((err=WriteSPIByte(SlaveAddress & 0xFF))!=0)
 348              		.loc 1 176 0
 349 024c FF0000E2 		and	r0, r0, #255
 350              	.LVL18:
 351 0250 FEFFFFEB 		bl	WriteSPIByte
 352              	.LVL19:
 353 0254 000050E3 		cmp	r0, #0
 354 0258 A600001A 		bne	.L42
 177:SPI_MCP23S08_SWITCH_INT.c **** 		return err;
 178:SPI_MCP23S08_SWITCH_INT.c **** 
 179:SPI_MCP23S08_SWITCH_INT.c **** 	//Write Address to SPI
 180:SPI_MCP23S08_SWITCH_INT.c **** 	if((err=WriteSPIByte(Address))!=0)
 355              		.loc 1 180 0
 356 025c 0400A0E1 		mov	r0, r4
 357 0260 FEFFFFEB 		bl	WriteSPIByte
 358 0264 000050E3 		cmp	r0, #0
 359 0268 A600001A 		bne	.L42
 181:SPI_MCP23S08_SWITCH_INT.c **** 		return err;
 182:SPI_MCP23S08_SWITCH_INT.c **** 
 183:SPI_MCP23S08_SWITCH_INT.c **** 	//Dummy write to SPI Data Register
 184:SPI_MCP23S08_SWITCH_INT.c **** 	if((err=WriteSPIByte(0xFF))!=0)
 360              		.loc 1 184 0
 361 026c FF00A0E3 		mov	r0, #255
 362 0270 FEFFFFEB 		bl	WriteSPIByte
 363 0274 000050E3 		cmp	r0, #0
 364 0278 A600001A 		bne	.L42
 185:SPI_MCP23S08_SWITCH_INT.c **** 		return err;
 186:SPI_MCP23S08_SWITCH_INT.c **** 
 187:SPI_MCP23S08_SWITCH_INT.c **** 	//Read data
 188:SPI_MCP23S08_SWITCH_INT.c **** 	*pByte=S0SPDR;
 365              		.loc 1 188 0
 366 027c 8E32A0E3 		mov	r3, #-536870904
 367 0280 023883E2 		add	r3, r3, #131072
 368 0284 B030D3E1 		ldrh	r3, [r3, #0]
 369 0288 0030C5E5 		strb	r3, [r5, #0]
 189:SPI_MCP23S08_SWITCH_INT.c **** 
 190:SPI_MCP23S08_SWITCH_INT.c **** 	//End
 191:SPI_MCP23S08_SWITCH_INT.c **** 	CS_SET;
 370              		.loc 1 191 0
 371 028c 0223A0E3 		mov	r2, #134217728
 372 0290 4E32A0E3 		mov	r3, #-536870908
 373 0294 0A3983E2 		add	r3, r3, #163840
 374 0298 002083E5 		str	r2, [r3, #0]
 375 029c 0000A0E3 		mov	r0, #0
 376              	.L42:
 192:SPI_MCP23S08_SWITCH_INT.c **** 
 193:SPI_MCP23S08_SWITCH_INT.c **** 	return 0;
 194:SPI_MCP23S08_SWITCH_INT.c **** }
 377              		.loc 1 194 0
 378 02a0 14D04BE2 		sub	sp, fp, #20
 379 02a4 30689DE8 		ldmfd	sp, {r4, r5, fp, sp, lr}
 380 02a8 1EFF2FE1 		bx	lr
 381              	.LFE9:
 383              		.section	.rodata.str1.4,"aMS",%progbits,1
 384              		.align	2
 385              	.LC0:
 386 0000 53504920 		.ascii	"SPI MCP23S08\000"
 386      4D435032 
 386      33533038 
 386      00
 387 000d 000000   		.align	2
 388              	.LC1:
 389 0010 53574954 		.ascii	"SWITCH INT\000"
 389      43482049 
 389      4E5400
 390              		.text
 391              		.align	2
 392              		.global	main
 394              	main:
 395              	.LFB10:
 195:SPI_MCP23S08_SWITCH_INT.c **** 
 196:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 197:SPI_MCP23S08_SWITCH_INT.c **** // MAIN
 198:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 199:SPI_MCP23S08_SWITCH_INT.c **** int main (void)
 200:SPI_MCP23S08_SWITCH_INT.c **** {
 396              		.loc 1 200 0
 397              		@ Function supports interworking.
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400 02ac 0DC0A0E1 		mov	ip, sp
 401              	.LCFI13:
 402 02b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 403              	.LCFI14:
 404 02b4 04B04CE2 		sub	fp, ip, #4
 405              	.LCFI15:
 201:SPI_MCP23S08_SWITCH_INT.c **** 	//Peripherials' frequency = fclk/4 = 15MHz
 202:SPI_MCP23S08_SWITCH_INT.c **** 	VPBDIV&=0xFFFFFFFC;
 406              		.loc 1 202 0
 407 02b8 0E12A0E3 		mov	r1, #-536870912
 408 02bc 7F2981E2 		add	r2, r1, #2080768
 409 02c0 0031D2E5 		ldrb	r3, [r2, #256]	@ zero_extendqisi2
 410 02c4 FC3003E2 		and	r3, r3, #252
 411 02c8 0031C2E5 		strb	r3, [r2, #256]
 203:SPI_MCP23S08_SWITCH_INT.c **** 	VPBDIV|=0x00;
 412              		.loc 1 203 0
 413 02cc 0031D2E5 		ldrb	r3, [r2, #256]	@ zero_extendqisi2
 414 02d0 FF3003E2 		and	r3, r3, #255
 415 02d4 0031C2E5 		strb	r3, [r2, #256]
 204:SPI_MCP23S08_SWITCH_INT.c **** 
 205:SPI_MCP23S08_SWITCH_INT.c **** 	//Port direction configuration
 206:SPI_MCP23S08_SWITCH_INT.c **** 	IODIR0 = 0xFF000000;
 416              		.loc 1 206 0
 417 02d8 FF24A0E3 		mov	r2, #-16777216
 418 02dc 8E32A0E3 		mov	r3, #-536870904
 419 02e0 0A3983E2 		add	r3, r3, #163840
 420 02e4 002083E5 		str	r2, [r3, #0]
 207:SPI_MCP23S08_SWITCH_INT.c **** 	IODIR1 = 0x00FF0000;
 421              		.loc 1 207 0
 422 02e8 0A1981E2 		add	r1, r1, #163840
 423 02ec FF38A0E3 		mov	r3, #16711680
 424 02f0 183081E5 		str	r3, [r1, #24]
 208:SPI_MCP23S08_SWITCH_INT.c **** 
 209:SPI_MCP23S08_SWITCH_INT.c **** 	SPIInit();
 425              		.loc 1 209 0
 426 02f4 FEFFFFEB 		bl	SPIInit
 210:SPI_MCP23S08_SWITCH_INT.c **** 	MCP23S08_Init();
 427              		.loc 1 210 0
 428 02f8 FEFFFFEB 		bl	MCP23S08_Init
 211:SPI_MCP23S08_SWITCH_INT.c **** 	EINT0Init();
 429              		.loc 1 211 0
 430 02fc FEFFFFEB 		bl	EINT0Init
 212:SPI_MCP23S08_SWITCH_INT.c **** 	LCDInit();
 431              		.loc 1 212 0
 432 0300 FEFFFFEB 		bl	LCDInit
 213:SPI_MCP23S08_SWITCH_INT.c **** 
 214:SPI_MCP23S08_SWITCH_INT.c **** 	LCDClear();
 433              		.loc 1 214 0
 434 0304 FEFFFFEB 		bl	LCDClear
 215:SPI_MCP23S08_SWITCH_INT.c **** 
 216:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText("SPI MCP23S08");
 435              		.loc 1 216 0
 436 0308 20009FE5 		ldr	r0, .L51
 437 030c FEFFFFEB 		bl	LCDText
 217:SPI_MCP23S08_SWITCH_INT.c **** 	LCDGotoXY(0,1);
 438              		.loc 1 217 0
 439 0310 0000A0E3 		mov	r0, #0
 440 0314 0110A0E3 		mov	r1, #1
 441 0318 FEFFFFEB 		bl	LCDGotoXY
 218:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText("SWITCH INT");
 442              		.loc 1 218 0
 443 031c 10009FE5 		ldr	r0, .L51+4
 444 0320 FEFFFFEB 		bl	LCDText
 219:SPI_MCP23S08_SWITCH_INT.c **** 	delay(0x400000);
 445              		.loc 1 219 0
 446 0324 0105A0E3 		mov	r0, #4194304
 447 0328 FEFFFFEB 		bl	delay
 448              	.L49:
 449 032c C90000EA 		b	.L49
 450              	.L52:
 451              		.align	2
 452              	.L51:
 453 0330 00000000 		.word	.LC0
 454 0334 10000000 		.word	.LC1
 455              	.LFE10:
 457              		.section	.rodata.str1.4
 458 001b 00       		.align	2
 459              	.LC2:
 460 001c 496E703D 		.ascii	"Inp=\000"
 460      00
 461 0021 000000   		.align	2
 462              	.LC3:
 463 0024 20646563 		.ascii	" dec        \000"
 463      20202020 
 463      20202020 
 463      00
 464 0031 000000   		.align	2
 465              	.LC4:
 466 0034 2062696E 		.ascii	" bin   \000"
 466      20202000 
 467              		.text
 468              		.align	2
 469              		.global	EINT0ISR
 471              	EINT0ISR:
 472              	.LFB11:
 220:SPI_MCP23S08_SWITCH_INT.c **** 
 221:SPI_MCP23S08_SWITCH_INT.c **** 
 222:SPI_MCP23S08_SWITCH_INT.c **** 	while(1);
 223:SPI_MCP23S08_SWITCH_INT.c **** }
 224:SPI_MCP23S08_SWITCH_INT.c **** 
 225:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 226:SPI_MCP23S08_SWITCH_INT.c **** // EINT0 interrupt routine
 227:SPI_MCP23S08_SWITCH_INT.c **** //*******************************
 228:SPI_MCP23S08_SWITCH_INT.c **** void EINT0ISR(void)
 229:SPI_MCP23S08_SWITCH_INT.c **** {
 473              		.loc 1 229 0
 474              		@ Interrupt Service Routine.
 475              		@ args = 0, pretend = 0, frame = 4
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477 0338 04C02DE5 		str	ip, [sp, #-4]!
 478 033c 0DC0A0E1 		mov	ip, sp
 479              	.LCFI16:
 480 0340 3FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, fp, ip, lr, pc}
 481              	.LCFI17:
 482 0344 04B04CE2 		sub	fp, ip, #4
 483              	.LCFI18:
 484 0348 04D04DE2 		sub	sp, sp, #4
 485              	.LCFI19:
 230:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned int i;
 231:SPI_MCP23S08_SWITCH_INT.c **** 	unsigned char val;
 232:SPI_MCP23S08_SWITCH_INT.c **** 	
 233:SPI_MCP23S08_SWITCH_INT.c **** 	EXTINT=0x01;	//Clear EINT0 interrupt flag
 486              		.loc 1 233 0
 487 034c 0150A0E3 		mov	r5, #1
 488 0350 0E32A0E3 		mov	r3, #-536870912
 489 0354 7F3983E2 		add	r3, r3, #2080768
 490 0358 4051C3E5 		strb	r5, [r3, #320]
 234:SPI_MCP23S08_SWITCH_INT.c **** 
 235:SPI_MCP23S08_SWITCH_INT.c **** 	SPIMCP23S08ReceiveByte(SLAVE_ADDRESS_MCP23S08_R, ADDR_MCP23S08_GPIO, &val);
 491              		.loc 1 235 0
 492 035c 4700A0E3 		mov	r0, #71
 493 0360 0910A0E3 		mov	r1, #9
 494 0364 25204BE2 		sub	r2, fp, #37
 495 0368 FEFFFFEB 		bl	SPIMCP23S08ReceiveByte
 496              	.LVL20:
 236:SPI_MCP23S08_SWITCH_INT.c **** 	val&=0x0F;
 497              		.loc 1 236 0
 498 036c 25305BE5 		ldrb	r3, [fp, #-37]	@ zero_extendqisi2
 499 0370 0F3003E2 		and	r3, r3, #15
 500 0374 25304BE5 		strb	r3, [fp, #-37]
 237:SPI_MCP23S08_SWITCH_INT.c **** 
 238:SPI_MCP23S08_SWITCH_INT.c **** 	LCDGotoXY(0,0);
 501              		.loc 1 238 0
 502 0378 0000A0E3 		mov	r0, #0
 503 037c 0010A0E1 		mov	r1, r0
 504 0380 FEFFFFEB 		bl	LCDGotoXY
 239:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText("Inp=");
 505              		.loc 1 239 0
 506 0384 70409FE5 		ldr	r4, .L59
 507 0388 0400A0E1 		mov	r0, r4
 508 038c FEFFFFEB 		bl	LCDText
 240:SPI_MCP23S08_SWITCH_INT.c **** 	LCD32bitNumberDec(val);
 509              		.loc 1 240 0
 510 0390 25005BE5 		ldrb	r0, [fp, #-37]	@ zero_extendqisi2
 511 0394 FEFFFFEB 		bl	LCD32bitNumberDec
 241:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText(" dec        ");
 512              		.loc 1 241 0
 513 0398 60009FE5 		ldr	r0, .L59+4
 514 039c FEFFFFEB 		bl	LCDText
 242:SPI_MCP23S08_SWITCH_INT.c **** 
 243:SPI_MCP23S08_SWITCH_INT.c **** 	LCDGotoXY(0,1);
 515              		.loc 1 243 0
 516 03a0 0000A0E3 		mov	r0, #0
 517 03a4 0510A0E1 		mov	r1, r5
 518 03a8 FEFFFFEB 		bl	LCDGotoXY
 244:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText("Inp=");
 519              		.loc 1 244 0
 520 03ac 0400A0E1 		mov	r0, r4
 521 03b0 FEFFFFEB 		bl	LCDText
 522 03b4 0440A0E3 		mov	r4, #4
 523              	.LVL21:
 524              	.L54:
 525              	.LBB2:
 245:SPI_MCP23S08_SWITCH_INT.c **** 	for(i=4;i>0;i--)
 246:SPI_MCP23S08_SWITCH_INT.c **** 	{
 247:SPI_MCP23S08_SWITCH_INT.c **** 		unsigned int tmp=val&(1<<(i-1));
 526              		.loc 1 247 0
 527 03b8 014044E2 		sub	r4, r4, #1
 248:SPI_MCP23S08_SWITCH_INT.c **** 		LCD32bitNumberDec(tmp>>(i-1));
 528              		.loc 1 248 0
 529 03bc 25005BE5 		ldrb	r0, [fp, #-37]	@ zero_extendqisi2
 530 03c0 150400E0 		and	r0, r0, r5, asl r4
 531 03c4 3004A0E1 		mov	r0, r0, lsr r4
 532 03c8 FEFFFFEB 		bl	LCD32bitNumberDec
 533              	.LBE2:
 534              		.loc 1 245 0
 535 03cc 000054E3 		cmp	r4, #0
 536 03d0 EC00001A 		bne	.L54
 249:SPI_MCP23S08_SWITCH_INT.c **** 	}
 250:SPI_MCP23S08_SWITCH_INT.c **** 	LCDText(" bin   ");
 537              		.loc 1 250 0
 538 03d4 28009FE5 		ldr	r0, .L59+8
 539 03d8 FEFFFFEB 		bl	LCDText
 251:SPI_MCP23S08_SWITCH_INT.c **** 
 252:SPI_MCP23S08_SWITCH_INT.c **** 	delay(0x20000);
 540              		.loc 1 252 0
 541 03dc 0208A0E3 		mov	r0, #131072
 542 03e0 FEFFFFEB 		bl	delay
 253:SPI_MCP23S08_SWITCH_INT.c **** 
 254:SPI_MCP23S08_SWITCH_INT.c **** 	VICVectAddr=0x00000000;					//Clear interrupt in 
 543              		.loc 1 254 0
 544 03e4 3F3DE0E3 		mvn	r3, #4032
 545 03e8 0F4003E5 		str	r4, [r3, #-15]
 255:SPI_MCP23S08_SWITCH_INT.c **** }
 546              		.loc 1 255 0
 547 03ec 24D04BE2 		sub	sp, fp, #36
 548 03f0 3F689DE8 		ldmfd	sp, {r0, r1, r2, r3, r4, r5, fp, sp, lr}
 549 03f4 0010BDE8 		ldmfd	sp!, {ip}
 550 03f8 04F05EE2 		subs	pc, lr, #4
 551              	.L60:
 552              		.align	2
 553              	.L59:
 554 03fc 1C000000 		.word	.LC2
 555 0400 24000000 		.word	.LC3
 556 0404 34000000 		.word	.LC4
 557              	.LFE11:
 781              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 SPI_MCP23S08_SWITCH_INT.c
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:14     .rodata:00000000 MCP23S08_settings
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:26     .text:00000000 EINT0Init
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:37     .text:00000000 $a
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:67     .text:00000054 $d
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:471    .text:00000338 EINT0ISR
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:73     .text:00000058 SPIInit
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:83     .text:00000058 $a
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:113    .text:000000a8 WriteSPIByte
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:149    .text:000000e4 SPIMCP23S08SendMultipleBytes
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:240    .text:000001ac SPIMCP23S08SendByte
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:272    .text:000001dc MCP23S08_Init
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:297    .text:00000208 $d
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:303    .text:0000020c delay
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:313    .text:0000020c $a
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:327    .text:00000228 SPIMCP23S08ReceiveByte
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:394    .text:000002ac main
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:453    .text:00000330 $d
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:477    .text:00000338 $a
/cygdrive/c/DOCUME~1/ADMINI~1/USTAWI~1/Temp/ccX9XDjf.s:554    .text:000003fc $d

UNDEFINED SYMBOLS
LCDInit
LCDClear
LCDText
LCDGotoXY
LCD32bitNumberDec
